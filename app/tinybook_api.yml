openapi: 3.0.3
info:
  title: TinyBook - Api
  description: Api system of TinyBook
  version: 1.0.0
  contact:
    email: 'cristian.sacristan@protonmail.com'
    name: 'Cristian Sacristan'
servers:
  - url: 'http://nanoserver.local:5000/api'
  - url: 'http://127.0.0.1:5000/api'
components:
  requestBodies:


paths:

  /v1/auth/login:
    post:
      requestBody:
        required: true
        description: body of user datas
        content:
          application/json:
            schema:
              example:
                {
                  'username': 'xxx',
                  'password': 'xxx'
                }
      responses:
        201:
          description: created
  /me:
    get:
      responses:
        200:
          description: OK

  /v1/users:
    get:
      tags:
        - user
      summary: user list
      description: user list method
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - user
      summary: Create a user
      description: ''
      operationId: createUser
      requestBody:
        required: true
        description: body of user datas
        content:
          application/json:
            schema:
              example: { 'username': 'xxx', 'email': 'xxx', 'password': 'xxx' }
      responses:
        '405':
          description: Invalid input
        '201':
          description: Created
  /v1/users/{user_id}:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    put:
      tags:
        - user
      summary: Updates a user data
      description: ''
      operationId: updateUserData
      parameters:
        - name: user_id
          in: path
          description: ID of user to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        description: body of user datas
        content:
          application/json:
            schema:
              example: {'username': 'xxx', 'email': 'xxx'}
      responses:
        '405':
          description: Invalid input
        '200':
          description: Param updated

  /v1/namespace/{ns_name}:
    post:
      tags:
        - namespace
      description: create new namespace
      operationId: postNamespace
      responses:
        201:
          description: ok
      parameters:
        - name: ns_name
          required: true
          in: path

